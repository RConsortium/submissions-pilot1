---
title: tlf_003_apr0eff0ancova
output:
  html_document:
    df_print: paged
    toc: yes
    toc_depth: '2'
  word_document:
    toc: yes
    toc_depth: '2'
  html_notebook:
    toc: yes
    toc_depth: 2
    toc_float: yes
  pdf_document:
    toc: yes
    toc_depth: '2'
vignette: >
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteIndexEntry{tlf_003_apr0eff0ancova}
  %\VignetteEncoding{UTF-8}
---

  <style>
  body .main-container {
    max-width: 2000px;
  }
</style>

```{r setup, message=FALSE}
# Program Initiation
source("../.Rprofile")           # Running start up program in .Rprofile 
devtools::load_all()             # Load all project specific R function in the project specific R package
```


```{r, meta}
# Meta information 
# Replace file name or path to link to the source file.
path$mock    <- file.path(path$document, "mk9999-mock-up.docx")        # Path to mock table 
path$pdvt    <- file.path(path$document, "mk9999-pdvt.xlsx")           # Path to validation tracker
path$ar_grid <- file.path(path$document, "mk9999-ar-grid.xlsx")        # Path to A&R grid

# Replace information below to actual information.
# The information may be directly extracted from the validation tracker instead of typing manually. 
requestor <- person("Yilong", "Zhang", email = "zhanyilo@merck.com")         # Requester 
developer <- person("Sarad", "Nepal", email = "sarad.nepal@merck.com")       # Developer

request_date  <- "2020-09-24"                                          # Request date in YYYY-MM-DD
complete_date <- "2020-11-15"                                          # Expected complete date in YYYY-MM-DD

# Pick from "protocol specific", "project specific", and "TA standard"
type <- "protocol specific"                                            # Delivery type          

# Pick from (table, listing, figure)
format <- "table"                                                      # Delivery format               

outdata <- "apr0eff0ancova.Rdata"                                      #Data output filename saved in outdata folder
output  <- "apr0eff0ancova.rtf"                                        #RTF output filename saved in outtable folder
```

# Introduction 
  
> Remove all instruction statement start with ">" in real A&R project. 

## Resources:

* [Training slides](https://collaboration.merck.com/:p:/r/sites/BAAMR/_layouts/15/Doc.aspx?sourcedoc=%7B2479B9D1-FD0E-4A35-AD16-5CF2B349BF52%7D&file=level3_training_slides.pptx&action=edit&mobileredirect=true) 
* [Demo project](https://lctcvp7236.merck.com:3838/content/5/)

# TLF Requirements Specifications 

> This section is to provide equivalent information in 
> [B.S004.6 TLF Requirements Specifications Template](http://webview.merck.com/webview/getContentById/B-S004.6+TLF+Requirements+Specifications+Template.docx?version=Current&format=&DocbaseName=mcdsprd&ObjectId=090157b48270ad1c&cid=090157b482706a7b)
> There is no need to fill the B.S004.6 by following B.S004 ER104 and this template. 
> One can [export this file to Microsoft Word](https://rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf) (Section 6) if it is required during review by customer.

## Summary 

* Description: Summary of Adverse Time to Event for MK9999-P001
* Requester: `r requestor`
* Developer: `r developer`
* Output type: `r type` 
* Output format: `r format`
* Request date: `r request_date`
* Target completion date: `r complete_date`

## Revisions 

> Please document revision request from customer using structure template below. 

### Revision 1

* Date: `YYYY-MM-DD` 
* Requester: `r requestor`
* Description of changes:
  + change detail

### Requirement Checklist 

* A&R grid: `r path$ar_grid`
* Mock table: `r path$mock`
* Number of outputs: 1

> A&R Programming lead shall review and confirm items below has been added in the mock table and A&R grid. 

+ Table title
+ List of footnotes 
+ Population
+ Treatment group and display order
+ Subgroups
+ Time points
+ Numerical value format
+ Percentage value format
+ Analysis by variables
+ Analysis sort order

### Additional Requirement 

> Programming lead shall review and confirm if additional requirement details shall be added. 

* R function used for statistical analysis: `path to reference code`
* Variables derivation: `important details to derive key variables`
* Missing value handling: as is
* Rounding algorithm: round()
* Should output be immutable: Yes `Yes or No`
* Percentage calculation method:
  + Numerator: count related to each subject
+ Denominator: subjects in population
* Dictionary to be used: N/A `MeDdra version`

Refer [A&R gird](`r path$ar_grid`) for more details.  

# Analysis Program

## R package used for analysis: 

> List all R packages used for this Rmd file.
> Try to list minimal sufficient R packages. 
> e.g. please use dplyr instead of tidyverse if possible. 

```{r, message = FALSE}
library(dplyr)
library(tibble)
library(tidyr)
library(haven)
library(r2rtf)
library(emmeans)
```

## Step 1: Import ADaM data

> Using `path$adam` and `path$sdtm` together with `file.path` to access SDTM/ADaM data in the study folder.
> Avoid to provide full path: e.g. `\\bardsar-prod\mk0431-diabetes\p170\dataanalysis\adsl.sas7bdat`

```{r, message=FALSE}
adlb <- read_sas(file.path(path$adam, "adlbc.sas7bdat"))        # Read ADLBC dataset
```

## Step 2: Prepare tidy data for analysis (optional)

> [Tidy data](https://r4ds.had.co.nz/tidy-data.html) is an important concept to make consistent strategy (using `tidyr`) for 
> data transformation (with `dplyr`), visualization (with `ggplot2`) and modeling (with `tidymodel` require additional qualification). 
> Alrough ADaM define dataset standards that support efficient data analysis and reporting, 
> it is not necessary to be a tidy data structure used by `tidyverse` (e.g. ADLB and ADVS). 
> This optional stpes can make downstream analysis become efficient.  

> split code into multiple code chunks in a logical way.
> provide necessary instruction before each chunk.
> each code chunk shall have at most one output object.

## Step 3: Prepare data for output

> In this step, the target is to perform statistical analysis and/or manipulate data to create R object(s) 
> that is ready for final output. Typically a (or multiple) data frame is created to mimic a mock table structure except variable formats.

```{r}
adlb1 <- subset(adlb, TRTPN %in% c(0, 81) & PARAMCD =="GLUC" & !is.na(AVISITN)) %>% 
  mutate(TRTPN = ifelse(TRTPN==0, 99 ,TRTPN)) # change treatment order for pairwise comparision 
```

### Fit data for linear model 
```{r}
gluc_lmfit <- adlb1 %>% 
  filter (AVISITN ==20) %>% 
  lm(CHG~ BASE + TRTPN , data=.)
```

### Raw summary statistics 
```{r}
t11 <- adlb1 %>%
  filter(AVISITN == 20) %>%
  group_by(TRTPN, TRTP) %>%
  summarise(
    N = n(),
    mean_bl = mean(BASE),
    sd_bl = sd(BASE),
    mean_chg = mean(CHG),
    sd_chg = sd(CHG),
    mean = mean(AVAL),
    sd = sd(AVAL)
  ) 
```

```{r}
t11
```

### Calculate LS mean  
```{r}
t12 <- emmeans(gluc_lmfit, "TRTPN")
```

```{r}
t12
```

### Merge and format data for reporting 
```{r}
apr0ancova1 <- merge(t11, t12) %>%
  mutate(emmean_sd = SE * sqrt(df)) %>%
  mutate(
    Trt = c("Study Drug", "Placebo"),
    N1 = N,
    Mean1 = fmt_est(., c("mean_bl", "sd_bl")),
    N2 = N,
    Mean2 = fmt_est(., c("mean", "sd")),
    N3 = N,
    Mean3 = fmt_est(., c("mean_chg", "sd_chg")),
    CI = paste(fmt_est(., "emmean"), fmt_ci(., c("lower.CL", "upper.CL")))
  ) %>%
  select(Trt:CI)
```

### Treatment Comparison
```{r}

t2 <- data.frame(pairs(t12))

apr0ancova2 <- t2 %>%
  mutate(
    lower = estimate - 1.96 * SE,
    upper = estimate + 1.96 * SE
  ) %>%
  mutate(
    comp = "Study Drug vs. Placebo",
    mean = paste(fmt_est(., "estimate"), fmt_ci(., c("lower", "upper"))),
    p = fmt_pval(., "p.value")
  ) %>%
  select(comp:p)

```

### Calculate root mean square and save data in outdata folder   
```{r}
apr0ancova3 <- data.frame(rmse = paste0(
  "Root Mean Squared Error of Change = ",
  formatC(sd(gluc_lmfit$residuals), digits = 2, format = "f", flag = "0")
))
```

```{r}
list(apr0ancova1, apr0ancova2, apr0ancova3)
```
## Step 4: Output 

> To enhance traceability and streamline validation process, it is recommended to save R object(s) directly used to generate final reports. 
> `base::save` can be used to save **one or more** R object(s) in an `.Rdata` file. `base::load` can be used to read R objects from `.Rdata` file.  
> `file.path(path$outdata, outdata)` shall be used to ensure portability for file path. 

```{r}
# Save analysis data one step before RTF generation
save(apr0ancova1, apr0ancova2, apr0ancova3, file = file.path(path$outdata, outdata) )         
```


## Step 5: Reporting

> Generate report based on mock table and/or specification in pre-speficied format.
> r2rtf R package can be used to generate TLFs in RTF format following Merck 
> [table formating standards](http://stdrptcomm.merck.com/docs/table_formatting_standards.doc)
> Using `r2rtf::write_rtf` to save the results. 
> `file.path(path$outtable, output)` shall be used to ensure portability for file path.   

To combine multiple tables, we have a flow in the following to print an rtf table
```{r}
tbl_1 <- apr0ancova1 %>%
  rtf_title(
    title = "ANCOVA of Change from Baseline at Week 20",
    subtitle = c(
      "Missing Data Approach",
      "ITT Population"
    )
  ) %>%
  rtf_colheader(
    colheader = " | Baseline | Week 20 | Change from Baseline",
    col_rel_width = c(3, 4, 4, 9)
  ) %>%
  rtf_colheader(colheader = "Treatment | N | Mean (SD) | N | Mean (SD) | N | Mean (SD) | LS Mean (95% CI){^a}", 
                col_rel_width = c(3, 1, 3, 1, 3, 1, 3, 5)) %>%
  rtf_body(
    col_rel_width = c(3, 1, 3, 1, 3, 1, 3, 5),
    text_justification = c("l", rep("c", 7)),
    last_row = FALSE
  ) %>%
  rtf_footnote(
    footnote = c("{^a} Based on an ANCOVA model.",
                 "ANCOVA = Analysis of Covariance, CI = Confidence Interval, LS = Least Squares, SD = Standard Deviation")
  )
```

```{r}
tbl_2 <- apr0ancova2 %>%
  rtf_colheader(
    colheader = "Pairwise Comparison | Difference in LS Mean (95% CI){^a} | p-Value",
    text_justification = c("l", "c", "c"),
    col_rel_width = c(8, 7, 5)
  ) %>%
  rtf_body(
    col_rel_width = c(8, 7, 5),
    text_justification = c("l", "c", "c"),
    last_row = FALSE
  )
```

```{r}
tbl_3 <-apr0ancova3 %>%
  rtf_body(
    as_colheader = FALSE,
    text_justification = "l"
  ) %>%
  rtf_source(
    source = "Source: [study999: adam-adlbc]" ,
    text_justification = "c"
    
  )
```

> `file.path(path$outtable, output)` shall be used to ensure portability for file path. 

```{r}
tbl <- list(tbl_1, tbl_2, tbl_3)
tbl %>% rtf_encode() %>% write_rtf(file.path(path$outtable, output))
```

# PDF

```{r, out.height = "640px", out.width = "480px"}
pdf <- paste0("/", substr(output, 1, nchar(output)-4), ".pdf")

knitr::include_graphics(file.path(paste0(path$outtable, pdf)))
```

# Session Information

> Display session information to enhance reproducibility.

```{r}
sessionInfo()
```
